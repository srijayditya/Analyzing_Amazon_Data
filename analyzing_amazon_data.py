# -*- coding: utf-8 -*-
"""analyzing_amazon_data

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j0EFZgUilPZla1Mbe_jV0S3up4fNORe1
"""

import numpy as np
import matplotlib.pyplot as plt

# Open the CSV file using 'with open'
with open('python project main.csv', 'r', encoding='ISO-8859-1') as file:
    # Read all lines from the file
    lines = file.readlines()

# Initialize lists to store the data
order_dates = []
total_owed = []

# Skip the header row
header = lines[0]
lines = lines[1:]

# Process the data
for line in lines:
    parts = line.strip().split(',')  # Split the line by comma
    order_date = parts[2]  # Assuming the 'Order Date' is in the first column
    total_owed_value = float(parts[9])  # Assuming 'Total Owed' is in the 10th column
    order_dates.append(order_date)
    total_owed.append(total_owed_value)

# Calculate the total sales, maximum sale, minimum sale, median sale, and mean sale
total_sales = np.sum(total_owed)
max_sale = np.max(total_owed)
min_sale = np.min(total_owed)
median_sale = np.median(total_owed)
mean_sale = np.mean(total_owed)

# Print the calculated statistics
print("Total Sales:", total_sales)
print("Maximum Sale:", max_sale)
print("Minimum Sale:", min_sale)
print("Median Sale:", median_sale)
print("Mean Sale:", mean_sale)

# Reduce the number of x-axis labels for better readability
num_labels = 10  # Set the number of labels you want to display
x_labels = order_dates[::len(order_dates) // num_labels]

# Plot a bar chart of the total orders per day with a different color and size
plt.figure(figsize=(10, 5))
plt.bar(np.arange(len(order_dates)), total_owed, color='#FF5733', width=0.8)
plt.xlabel('Order Date')
plt.ylabel('Total Owed')
plt.title('Total Orders per Day')
plt.xticks(np.arange(0, len(order_dates), len(order_dates) // num_labels), x_labels, rotation=45)
plt.show()

# Create a line chart of the total sales over time with a different color
plt.figure(figsize=(10, 5))

# Plot a line graph
plt.plot(np.arange(len(order_dates)), total_owed, color='#3357FF', linewidth=2)
plt.xlabel('Order Date')
plt.ylabel('Total Owed')
plt.title('Total Sales over Time')
plt.xticks(np.arange(0, len(order_dates), len(order_dates) // num_labels), x_labels, rotation=45)
plt.show()